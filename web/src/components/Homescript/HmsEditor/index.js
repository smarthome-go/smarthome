import { LRLanguage, indentNodeProp, delimitedIndent, foldNodeProp, foldInside, LanguageSupport } from '@codemirror/language';
import { completeFromList } from '@codemirror/autocomplete';
import { styleTags, tags } from '@lezer/highlight';
import { LRParser } from '@lezer/lr';

// This file was generated by lezer-generator. You probably shouldn't edit it.
const spec_Ident = {__proto__:null,import:14, type:18, templ:22, trigger:26, from:36, let:44, return:74, break:78, continue:82, loop:86, while:90, for:94, in:96, true:108, false:108, on:108, off:108, new:114, fn:118, null:128, none:130, exit:140, throw:140, assert:140, print:140, println:140, debug:140, as:204, if:208, else:210, match:214, try:220, catch:222, pub:228, impl:232, event:240};
const parser = LRParser.deserialize({
  version: 14,
  states: "HbQ]QPOOOzQPO'#EvO!PQPO'#EwO!UQPO'#EyOOQO'#C`'#C`OOQO'#E|'#E|Q]QPOOO!ZQPO'#CaO!lQPO'#DPO!qQPO'#CqO!vQPO'#EpO!{QPO'#EqO#WQPO'#EsO#RQPO'#C`OOQO,5;b,5;bO#]QPO,5;cO#bQPO,5;eOOQO-E8z-E8zOOQO'#Cd'#CdO#mQPO'#CdO#rQPO'#CdO#wQPO'#CdO#|QPO,58{O$RQPO,58{O$aQPO,59kO$fQPO,59]O$nQPO,5;[OOQO,5;],5;]OOQO'#Eu'#EuO$sQPO,5;_OOQO,58z,58zO$xQPO'#F]O%ZQPO1G0}O%`QPO1G1PO%hQPO1G1POOQO1G1P1G1PO%hQPO1G1PO%pQQO'#EzOOQO'#Cf'#CfOOQO,59O,59OOOQO'#Ch'#ChOOQO'#Cj'#CjO%{QPO1G.gO&QQPO1G.gO&YQSO1G/VO&hQWO1G.wO&YQSO1G.wO'oQPO'#DjO'wQPO1G0vO(PQPO1G0yO(UQPO'#CwOOQO'#Cx'#CxO(ZQPO'#F`O(`QPO'#F`OOQO'#F^'#F^O(hQPO'#F^OOQO,5;w,5;wO(pQPO,5;wOOQO7+&i7+&iOOQO,5;q,5;qOOQO7+&k7+&kO(uQPO7+&kOOQO-E9T-E9TO(}QPO7+&kOOQO'#E{'#E{O&hQWO,5;fOOQO'#Co'#CoO)VQPO7+$RO)[QPO7+$RO)mQPO7+$RO)uQPO7+$RO&YQSO'#F[OOQO'#Cs'#CsO&YQSO'#CsO)zQPO7+$qO*PQWO'#DeO+}QWO7+$cO,UQPO'#DaOOQO'#Da'#DaOOQO'#Ds'#DsOOQO'#Dr'#DrOOQO'#Dv'#DvO&hQWO'#DuO,ZQPO'#E`OOQO'#D`'#D`O&hQWO'#D`O,`QWO'#C}OOQO'#C|'#C|OOQO'#C{'#C{O-PQPO'#DfO$nQPO'#DhO&hQWO'#EgO&hQWO'#EjO-UQPO'#EmO-ZQPO7+$cOOQO,5:U,5:UO-`QPO,5:UOOQO7+&b7+&bO&YQSO7+&bO-eQPO7+&eOOQO,59c,59cO&YQSO,5;zO-jQPO,5;zO-oQPO,5;xO-}QPO,5;xOOQO1G1c1G1cOOQO<<JV<<JVP.VQPO'#FVO.[QPO<<JVO*WQWOOO0ZQWO1G1QOOQO<<Gm<<GmOOQO,5;i,5;iO0eQPO<<GmO0jQPO<<GmOOQO-E8{-E8{O%{QPO<<GmO0{QPO,5;vOOQO,59_,59_OOQO<<H]<<H]OOQO,5:P,5:PO1QQWO,5:PO&hQWO,5:[O&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:eO&hQWO,5:xO&hQWO,5:|O1[QPO,5:}O&YQSO,5;POOQO<<G}<<G}OOQO'#Dc'#DcOOQO,59{,59{O1aQWO,5:aO3mQWO,5:zO3tQWO,59zO3{QWO,59iO5yQWO'#C{O7qQWO'#D_OOQO'#DO'#DOOOQO'#FP'#FPO9jQWO,59iOOQO,59i,59iO:ZQWO'#DQO:bQPO'#DSO:gQPO'#DUO-UQPO'#DWO&hQWO'#DYO:lQPO'#D[O:qQPO,5:QO;PQPO,5:SO;XQWO,5;RO;`QWO,5;UO;gQPO,5;XO&hQWO<<G}O&YQSO1G/pO-UQPO<<I|O;lQPO<<JPOOQO1G1f1G1fO&YQSO1G1fOOQO,5;j,5;jO;wQPO1G1dOOQO-E8|-E8|OOQOAN?qAN?qO%{QPOAN=XO<VQPOAN=XP$RQPO'#E}O<[QPOAN=XOOQO1G1b1G1bO<aQWO1G/kO<hQPO1G/kOOQO1G/k1G/kO=UQWO1G/vO?QQWO1G0PO@|QWO1G0POBxQWO1G0PODtQWO1G0POFpQWO1G0POHlQWO1G0POLqQWO1G0POLxQWO1G0POMPQWO1G0PON{QWO1G0dO!!wQWO1G0hOOQO1G0i1G0iOOQO1G0k1G0kO!#OQWO'#FeOOQO1G0f1G0fO!#YQPO1G0fOOQO1G/f1G/fOOQO1G/T1G/TOOQO,59y,59yO!#_QWO1G/TOOQO-E8}-E8}O!#fQWO,59lOOQO,59l,59lOOQO,59n,59nOOQO,59p,59pO!#mQWO,59rO;XQWO,59tO!%dQPO,59vO!%iQPO'#FdOOQO'#Fc'#FcO!%nQPO'#FcOOQO1G/l1G/lO!%vQPO1G/lOOQO1G/n1G/nO&YQSO1G/nO!%{QWO1G0mO!*tQWO1G0pO!*{QPO1G0sO!+QQWOAN=iO!+XQPO7+%[OOQOAN?hAN?hOOQO'#FU'#FUO!+aQPOAN?kO#RQPO'#FUOOQOAN?kAN?kOOQO7+'Q7+'QP!+lQPO'#FOO!+wQPOG22sO%{QPOG22sOOQOG22sG22sO!+|QWO,5;lOOQO7+%V7+%VO!,ZQWO7+%VOOQO-E9O-E9OOOQO7+&S7+&SO!,bQWO,5<PO!,iQPO,5<POOQO7+&Q7+&QOOQO7+$o7+$oOOQO1G/W1G/WOOQO1G/^1G/^O!,qQWO1G/`O&hQWO1G/bO&hQWO,5<OO!.hQPO,5;}O!.sQPO,5;}OOQO7+%W7+%WO-UQPO7+%YO!.{QPO7+&XO!/TQWO'#DrO&hQWO'#DuO!0}QWO'#D`OOQO7+&[7+&[O!1UQPO7+&[O-UQPO7+&_OOQOG23TG23TO!1^QPO'#FSO!1cQPO<<HvOOQO<<Hv<<HvOOQO-E9S-E9SOOQOG25VG25VOOQO,5;p,5;pOOQOLD(_LD(_O!1kQPOLD(_OOQO<<Hq<<HqP&hQWO'#FQO!1pQWO1G1kOOQO7+$z7+$zO;XQWO7+$|O!1wQWO1G1jOOQO,5;m,5;mO!2RQPO1G1iOOQO-E9P-E9POOQO<<Ht<<HtOOQO<<Is<<IsO&hQWO,5<SO!2^QWO,5<SO!2eQWO<<IvO!2lQPO<<IvOOQO<<Iv<<IvOOQO<<Iy<<IyO!2tQPO,5;nOOQO-E9Q-E9QOOQOAN>bAN>bOOQO!$'Ky!$'KyO!2yQWO<<HhP!4pQPO'#FRO!4xQWO1G1nO!5PQWO1G1nO&hQWO1G1nOOQO,5;o,5;oOOQOAN?bAN?bO!5ZQWOAN?bOOQO-E9R-E9RO&YQSO1G1YOOQOAN>SAN>SOOQO7+'Y7+'YO!5bQWO7+'YO!5iQWO7+'YOOQOG24|G24|P!)mQWO'#FTOOQO7+&t7+&tOOQO<<Jt<<Jt",
  stateData: "!5v~O#|OSPOSQOS~OVVOXWOfXO!]YO#fZO#h[O#l]O$]PO$^RO~OU^O~O$U_O~Oi`O~OUbOXcOZdO]eO_gO~OUhO~OUiO~OUjO~OXWOfXO!]YO~OUlO~O_oO~O]uO`qOjsO~OUvO~OUxO~OUyO~ObzO~OUbOXcOZdO]eO~O$U|O~O#}!OO$U}O~O!_!PO~O!P!RO~OU!TOa!YOm!TO$R!WO$T!SO~Od![O~O]uOj!^O~O`!_Oj!^O~O$_!bO$`!bO$a!bO~OU!dO~O`!fOa!hO~O_oOh!jOi!iOn!kO~OU!rO_!xOi!mOm!pOn!sO!U!oO!Z!{O!]!|O!_!wO!b!pO!c!pO!h!qO!k!sO!l!sO#[!}O#_#OO#b#PO~OU#SO!`#RO~O_!xO!a#UO~O$]PO~OU#WO~O#}#XO~OU!TOm!TO~O`#ZOa$QX~Oa#]O~O]uOj#^O~O`#`Oj#^O~Od#cO~OUbOXcOZdO]eOa#eO~O`#fOa#eO~Ob#hO~Od#kO~Oj#lO~P&hOi#yO!e#nO!k#sO!n#oO!o#pO!p#qO!q#rO!r#rO!s#sO!t#tO!u#tO!v#tO!w#uO!x#vO!y#uO!z#wO!{#wO!|#wO!}#wO#O#wO#P#wO#R#xO#W#zO#Y#{O$Y#zO$Z#zO!_#TX~Od#|O~P*WO!W#}O~O!_$QO~OXWOa$YOfXOu$ZOw$[Oy$]O{$^O}$_O!P$`O~P&hO_$aO~O_!xO~O$U$fO~O#}$gO~O_$iO~O#}$kO~OU!TOm!TO$T!SOa$Qa~O`$mOa$Qa~O]uO~O]uOj$oO~Oi!SX!_!SX!e!SX!k!SX!n!SX!o!SX!p!SX!q!SX!r!SX!s!SX!t!SX!u!SX!v!SX!w!SX!x!SX!y!SX!z!SX!{!SX!|!SX!}!SX#O!SX#P!SX#R!SX#W!SX#Y!SX$Y!SX$Z!SX~O`#nij#ni~P.dOb$pO~OUbOXcOZdO]eOa$qO~Oj$tO~O`$uOj$wO~P*WOU%UO~O!w#uO#W#zO$Y#zO$Z#zOd!iai!ia!_!ia!e!ia!k!ia!n!ia!o!ia!p!ia!q!ia!r!ia!s!ia!t!ia!u!ia!v!ia!x!ia!y!ia!z!ia!{!ia!|!ia!}!ia#O!ia#P!ia#R!ia#Y!ia`!iaj!ia!`!iaa!ia_!ia#`!ia~O!`%XO~P&hO!`%ZO~P*WOa%[O~P*WOioX!_oX!eoX!koX!noX!ooX!poX!qoX!roX!soX!toX!uoX!voX!woX!xoX!yoX!zoX!{oX!|oX!}oX#OoX#PoX#RoX#WoX#YoX$YoX$ZoX~Od%]OaoX~P4SO!eoX!noX!ooX!poX!qoX!roX!soX!toX!uoX!voX!woX!xoX!yoX!zoX!{oX!|oX!}oX#OoX#PoX#RoX#WoX#YoX$YoX$ZoX~Od%]OU!RXX!RX_!RXa!RXf!RXi!RXm!RXn!RXu!RXw!RXy!RX{!RX}!RX!P!RX!U!RX!Z!RX!]!RX!_!RX!b!RX!c!RX!h!RX!k!RX!l!RX#[!RX#_!RX#b!RX~P6TOXWOa%[OfXOu$ZOw$[Oy$]O{$^O}$_O!P$`O~P&hOd%aO~P&hOd%bO~Od%cO~OU%fO~OU%gOa%jOm%gO$R%hO~O_!xO!a%mO~O_!xO~P*WO_%oO~P*WO#c%pO~Oa%wO!]YO#f%vO~OU!TOm!TO$T!SOa$Qi~Ob%{O~Od%|O~Oj&OO~P&hO`&POj&OO~O!w#uO!x#vO!y#uO#W#zO$Y#zO$Z#zO~Od!dii!di!_!di!e!di!k!di!n!di!o!di!p!di!q!di!r!di!s!di!t!di!u!di!v!di!z!di!{!di!|!di!}!di#O!di#P!di#R!di#Y!di`!dij!di!`!dia!di_!di#`!di~P<pO!e#nO!k#sO!o#pO!p#qO!q#rO!r#rO!s#sO!t#tO!u#tO!v#tOd!mii!mi!_!mi!n!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!e#nO!k#sO!p#qO!q#rO!r#rO!s#sO!t#tO!u#tO!v#tOd!mii!mi!_!mi!n!mi!o!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!e#nO!k#sO!q#rO!r#rO!s#sO!t#tO!u#tO!v#tOd!mii!mi!_!mi!n!mi!o!mi!p!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!e#nO!k#sO!s#sO!t#tO!u#tO!v#tOd!mii!mi!_!mi!n!mi!o!mi!p!mi!q!mi!r!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!e#nO!t#tO!u#tO!v#tOd!mii!mi!_!mi!k!mi!n!mi!o!mi!p!mi!q!mi!r!mi!s!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!e#nOd!mii!mi!_!mi!k!mi!n!mi!o!mi!p!mi!q!mi!r!mi!s!mi!t!mi!u!mi!v!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!w#uO#W#zO$Y#zO$Z#zOd!mii!mi!_!mi!e!mi!k!mi!n!mi!o!mi!p!mi!q!mi!r!mi!s!mi!t!mi!u!mi!v!mi!x!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~O!y!mi~PJhO!y#uO~PJhO!e#nO!k#sO!n#oO!o#pO!p#qO!q#rO!r#rO!s#sO!t#tO!u#tO!v#tOd!mii!mi!_!mi!z!mi!{!mi!|!mi!}!mi#O!mi#P!mi#R!mi#Y!mi`!mij!mi!`!mia!mi_!mi#`!mi~P<pO!e#nO!k#sO!n#oO!o#pO!p#qO!q#rO!r#rO!s#sO!t#tO!u#tO!v#tO!z#wO!{#wO!|#wO!}#wO#O#wO#P#wO#R#xOd#Qii#Qi!_#Qi#Y#Qi`#Qij#Qi!`#Qia#Qi_#Qi#`#Qi~P<pOj&RO~P*WO`&SO!`$XX~P*WO!`&UO~Oa&VO~P*WOd&WO~P*WOd&XOUzaXza_zaazafzaizamzanzauzawzayza{za}za!Pza!Uza!Zza!]za!_za!bza!cza!hza!kza!lza#[za#_za#bza~O!Q&ZO~O#}&[O~O`&]Oa$VX~Oa&_O~O#]&aOd#Zii#Zi!_#Zi!e#Zi!k#Zi!n#Zi!o#Zi!p#Zi!q#Zi!r#Zi!s#Zi!t#Zi!u#Zi!v#Zi!w#Zi!x#Zi!y#Zi!z#Zi!{#Zi!|#Zi!}#Zi#O#Zi#P#Zi#R#Zi#W#Zi#Y#Zi$Y#Zi$Z#Zi`#Zij#Zi!`#ZiU#ZiX#Zi_#Zia#Zif#Zim#Zin#Ziu#Ziw#Ziy#Zi{#Zi}#Zi!P#Zi!U#Zi!Z#Zi!]#Zi!b#Zi!c#Zi!h#Zi!l#Zi#[#Zi#_#Zi#b#Zi#`#Zi~OU&bO_!xOi!mOm!pOn!sO!U!oO!Z!{O!]!|O!_!wO!b!pO!c!pO!h!qO!k!sO!l!sO#[!}O#_#OO#b#PO~Oa&eO~P!)mOU&gO~Od&hO~P*WO`&iO!`&kO~Oa&mO!]YO#f%vO~OU!TOm!TO$T!SO~Od&oO~O`#taj#ta!`#ta~P*WOj&qO~P&hO!`$Xa~P&hO`&sO!`$Xa~Od&tOU|iX|i_|ia|if|ii|im|in|iu|iw|iy|i{|i}|i!P|i!U|i!Z|i!]|i!_|i!b|i!c|i!h|i!k|i!l|i#[|i#_|i#b|i~OU%gOm%gOa$Va~O`&xOa$Va~O_!xO#[!}O~O#`&|Oi!fX!_!fX!e!fX!k!fX!n!fX!o!fX!p!fX!q!fX!r!fX!s!fX!t!fX!u!fX!v!fX!w!fX!x!fX!y!fX!z!fX!{!fX!|!fX!}!fX#O!fX#P!fX#R!fX#W!fX#Y!fX$Y!fX$Z!fX~O#`&|O~P.dO`'OOa'QO~OU'SO~O`&iO!`'UO~Od'VO~O!`$Xi~P&hO`$Wia$Wi~P*WOU%gOm%gOa$Vi~O#`'[O~P.dOa'^O~P!)mO`'_Oa'^O~O#}'aO~Od'bOU!OyX!Oy_!Oya!Oyf!Oyi!Oym!Oyn!Oyu!Oyw!Oyy!Oy{!Oy}!Oy!P!Oy!U!Oy!Z!Oy!]!Oy!_!Oy!b!Oy!c!Oy!h!Oy!k!Oy!l!Oy#[!Oy#_!Oy#b!Oy~OU%gOm%gO~O`'cO~P4SO`$[ia$[i~P4SOa'fO~P!)mO`'iO~P4SO`$[qa$[q~P4SOP!u~",
  goto: "8b$]PPPP$^$bPP$fP$qP$tP$wPPPP$zP%WP%cPPP&U&[PP&e(h)i+V%W%_P%_P%_P%_P%_P%_PP%_+Z,[P-ZP-^-^P-^P.XPPPPP-^P._/YP._0TPP._PPPPPPPPPPPPPPPPPP._P1Q1}._._P._P2xPP3vPP3vPP4q$bP$bP5S5V$bP$b5^5g5j5p5v5|6S6^6d6j6p6vPPPP7Q7_7oP7rPP7z7}8VPP8YTTOUTSOUQfVQ{gV#d!f#f$rRwcRwdRweQ!ezQ$s#hQ%z$pR&p%{SSOUQkZT$V!x$XQ!l|Q#Q!OQ#i!iQ#j!kQ$h#UQ$j#XQ%V#{Q%r$gQ%x$kQ&`%mR'h'aX!Vo#Z$m%yW!Uo#Z$m%yR#Y!VQ!n}^#a!c%o&|'O'['_'gQ#m!mS$P!t&cQ$R!wQ$S!xQ$c!}Q$d#OQ$x#nQ$y#oQ$z#pQ${#qQ$|#rQ$}#sQ%O#tQ%P#uQ%Q#vQ%R#wQ%S#xQ%T#yQ%W$QQ%^$XQ%`$ZQ%e$_Q%q$fY%}$u&P&S&r&sQ&u&ZR&v&[!h!z}!c!m!t!w!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$Z$_$f$u%o&P&S&Z&[&c&r&s'O'_'gS$U!x$XQ'Z&|R'e'[!p!y}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'gQ#T!QQ$e#PQ%d$^Q%l$bQ%n$cQ%s$hQ&Y%eQ&z&`Q&{&aQ'R&gR'W&uT$W!x$X!h!z}!c!m!t!w!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$Z$_$f$u%o&P&S&Z&[&c&r&s'O'_'gS$T!x$XQ'Y&|R'd'[!f!v}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u&P&S&Z&[&r&s&|'[W&d%o'O'_'gR&}&cR$O!o!q!p}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'gQ!QjR$b!|!q!v}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'g!q!r}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'g!h!t}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u&P&S&Z&[&c&r&s&|'[X&c%o'O'_'g!n!v}!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'gR#b!c!q!u}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'g!p!y}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'gR&{&a!q!y}!c!m!t!w!x!}#O#n#o#p#q#r#s#t#u#v#w#x#y$Q$X$Z$_$f$u%o&P&S&Z&[&c&r&s&|'O'['_'gSSOUQkZQn]S%t$i%uR&n%vRm[SQOUR#V!RQt`X!]q!_#_#`R!cuQUORaUQ!g{R#g!gQ#[!XR$n#[Q$X!xR%_$XQ$v#mS&Q$v&TR&T%WQ&^%iR&y&^Q&j%rR'T&jQ'P&fR'`'PQ%u$iR&l%uQr`S!`r!aR!atg!j|!O!i!k#U#X#{$g$k%m'aQp_g!j|!O!i!k#U#X#{$g$k%m'aR!ZoQ!XoV$l#Z$m%yR%k$aQ%i$aV&w&]&x'XR%Y$QQ&f%oV']'O'_'g",
  nodeNames: "⚠ LineComment BlockComment Program Item ImportItem Ident import ImportItemCanditate type TypeImport templ TemplImport trigger TriggerImport { , } from Module ; LetStatement let Type Word [ ] ObjectTypeFieldAnnotation ObjectTypeFieldKey String QuestionMark Expression ExpressionWithBlock Block Statement TypeDefinition ReturnStatement return BreakStatement break ContinueStatement continue LoopStatement loop WhileStatement while ForStatement for in ExpressionStatement ExpressionWithoutBlock LiteralExpression Number Boolean Boolean ListLiteral ObjectLiteral new FunctionLiteral fn Parameters ( ) Arrow null none RangeExpression Range VariableName BuiltinFunc BuiltinFunc PrefixExpression PrefixOp Minus Not InfixExpression BitOr BitXor BitAnd ShiftLeft ShiftRight Plus Multiply Divide Modulo Power LogicalAnd LogicalOr Equal NotEqual LessThan LessThanEqual GreaterThan GreaterThanEqual AssignExpression AssignOp CallExpression CallBase IndexExpression MemberExpression . CastExpression as IfExpression if else MatchExpression match FatArrow TryExpression try catch FunctionDefinition PubItem pub ImplBlock impl ImplTemplateIdent SingletonIdent SingletonDefinition event Annotation TriggerAnnotationItem TriggerConnective",
  maxTerm: 155,
  skippedNodes: [0,1,2],
  repeatNodeCount: 10,
  tokenData: "3Y~RzXY#uYZ#u]^#upq#uqr#zrs$Xst%ytu&Ouv&Tvw&bwx&rxy(_yz(dz{(i{|(||})U}!O)Z!O!P)m!P!Q)z!Q![+x![!],k!]!^,p!^!_,u!_!`-_!`!a-v!a!b.`!b!c.g!c!}.l!}#O/P#P#Q/U#Q#R/Z#R#S.l#T#U/c#U#].l#]#^0c#^#c.l#c#d1c#d#o.l#o#p2c#p#q2h#q#r2x#r#s2}~#zO#|~~$PP!l~!_!`$S~$XO!{~~$^Vm~Or$Xrs$ss#O$X#O#P$x#P;'S$X;'S;=`%s<%lO$X~$xOm~~${RO;'S$X;'S;=`%U;=`O$X~%ZWm~Or$Xrs$ss#O$X#O#P$x#P;'S$X;'S;=`%s;=`<%l$X<%lO$X~%vP;=`<%l$X~&OO$^~~&TO$]~~&YP!v~!_!`&]W&bO#RW~&gQ!p~vw&m!_!`&]~&rO!x~~&wVm~Ow&rwx$sx#O&r#O#P'^#P;'S&r;'S;=`(X<%lO&r~'aRO;'S&r;'S;=`'j;=`O&r~'oWm~Ow&rwx$sx#O&r#O#P'^#P;'S&r;'S;=`(X;=`<%l&r<%lO&r~([P;=`<%l&r~(dO!_~~(iO!`~~(nQ!t~z{(t!_!`&]~(yP!w~!_!`&]~)RP!s~!_!`&]~)ZO`~X)`Q!kW!_!`&]!`!a)fX)mO$YW!aP~)rP#W~!O!P)u~)zO!e~~*PR!u~z{*Y!P!Q+a!_!`&]~*]TOz*Yz{*l{;'S*Y;'S;=`+Z<%lO*Y~*oVOz*Yz{*l{!P*Y!P!Q+U!Q;'S*Y;'S;=`+Z<%lO*Y~+ZOQ~~+^P;=`<%l*Y~+fSP~OY+aZ;'S+a;'S;=`+r<%lO+a~+uP;=`<%l+a~+}R!U~!O!P,W!Q![+x#Y#Z,f~,ZP!Q![,^~,cP!U~!Q![,^~,kO!U~~,pO#}~~,uOd~~,zQ!|~!^!_-Q!_!`-Y~-VP!q~!_!`&]~-_O!}~X-fQ$UP#RW!_!`-l!`!a-qW-qO!zWW-vO#`W~-{Q#O~!_!`.R!`!a.W~.WO#P~~.]P!r~!_!`&]].gO$RPn[~.lO$T~].sSUXhS!Q![.l!c!}.l#R#S.l#T#o.l~/UOi~~/ZOj~~/`P!o~!_!`&]_/jUUXhS!Q![.l!c!}.l#R#S.l#T#h.l#h#i/|#i#o.l_0VS$`QUXhS!Q![.l!c!}.l#R#S.l#T#o.l_0jUUXhS!Q![.l!c!}.l#R#S.l#T#b.l#b#c0|#c#o.l_1VS$aQUXhS!Q![.l!c!}.l#R#S.l#T#o.l_1jUUXhS!Q![.l!c!}.l#R#S.l#T#b.l#b#c1|#c#o.l_2VS$_QUXhS!Q![.l!c!}.l#R#S.l#T#o.l~2hO_~~2mQ!n~!_!`&]#p#q2s~2xO!y~~2}Oa~~3QP!`!a3T~3YO$Z~",
  tokenizers: [0, 1, 2, 3],
  topRules: {"Program":[0,3]},
  specialized: [{term: 6, get: (value) => spec_Ident[value] || -1}],
  tokenPrec: 3071
});

const HomescriptLanguage = LRLanguage.define({
    parser: parser.configure({
        props: [
            indentNodeProp.add({
                Application: delimitedIndent({ closing: ')', align: false }),
            }),
            foldNodeProp.add({
                Application: foldInside,
            }),
            styleTags({
                'for while loop if else match try catch return break continue impl': tags.controlKeyword,
                'in new': tags.operatorKeyword,
                'let fn type templ trigger': tags.definitionKeyword,
                'pub event': tags.modifier,
                'import from': tags.moduleKeyword,
                'ImportItem/Module/Ident': tags.namespace,
                // 'ImportItem/ImportItemCanditate/Ident': t.namespace,
                'ImportItem/ImportItemCanditate/TypeImport/Ident': tags.typeName,
                'ImportItem/ImportItemCanditate/TemplImport/Ident': tags.namespace,
                'ImportItem/ImportItemCanditate/TriggerImport/Ident': tags.local(tags.variableName),
                "Annotation": tags.separator,
                "TriggerConnective": tags.operatorKeyword,
                "ImplTemplateIdent/Ident": tags.namespace,
                "SingletonIdent/Ident": tags.typeName,
                'TypeDefinition/Ident': tags.namespace,
                'FunctionDefinition/Ident': tags.function(tags.variableName),
                'ObjectTypeFieldKey/Ident': tags.propertyName,
                'ObjectTypeFieldAnnotation ObjectTypeFieldAnnotation/Ident': tags.separator,
                as: tags.keyword,
                Boolean: tags.bool,
                null: tags.null,
                none: tags.null,
                'CallExpression/CallBase/Expression/ExpressionWithoutBlock/VariableName/Ident': tags.function(tags.propertyName),
                'ObjectLiteral/Ident': tags.propertyName,
                'MemberExpression/Ident': tags.propertyName,
                'FunctionDefinition/parameterList/Ident': tags.local(tags.variableName),
                'ForStatement/Ident': tags.local(tags.variableName),
                'Parameters/Ident': tags.local(tags.variableName),
                'VariableName/Ident': tags.variableName,
                LineComment: tags.lineComment,
                BlockComment: tags.blockComment,
                Number: tags.number,
                String: tags.string,
                'Arrow QuestionMark': tags.typeOperator,
                'FatArrow': tags.controlOperator,
                'Plus Minus Multiply Divide Modulo Power': tags.arithmeticOperator,
                'LogicalOr LogicalAnd': tags.logicOperator,
                'LessThan LessThanEqual GreaterThan GreaterThanEqual NotEqual Equal': tags.compareOperator,
                'AssignOp`': tags.definitionOperator,
                '"(" ")" "{" "}" "[" "]"': tags.bracket,
                '"." ".." "," ";"': tags.separator,
                BuiltinFunc: tags.standard(tags.function(tags.variableName)),
                'Type/Word': tags.typeName,
            }),
        ],
    }),
    languageData: {
        commentTokens: { line: '//' },
    },
});
const HomescriptCompletion = HomescriptLanguage.data.of({
    autocomplete: completeFromList([
        { label: 'pub', type: 'keyword' },
        { label: 'new', type: 'keyword' },
        { label: 'fn', type: 'keyword' },
        { label: 'let', type: 'keyword' },
        { label: 'return', type: 'keyword' },
        { label: 'break', type: 'keyword' },
        { label: 'continue', type: 'keyword' },
        { label: 'if', type: 'keyword' },
        { label: 'else', type: 'keyword' },
        { label: 'match', type: 'keyword' },
        { label: 'loop', type: 'keyword' },
        { label: 'while', type: 'keyword' },
        { label: 'for', type: 'keyword' },
    ]),
});
function Homescript() {
    return new LanguageSupport(HomescriptLanguage, [HomescriptCompletion]);
}

export { Homescript, HomescriptCompletion, HomescriptLanguage };
